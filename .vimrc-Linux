"Rudy @rfaile313 .vimrc
""""""""""""""""""""""""""""
set number
set showcmd
set wildmenu
set bs=2
set encoding=utf-8
set modelines=0
" Move between windows with ctrl <-- -->
nmap <silent> <C-Right> :wincmd l<CR>
nmap <silent> <C-Left> :wincmd h<CR>
" remove highlighting after search with comma-space
nnoremap <silent> ,<space> :nohlsearch<CR>
set wrap
"set paste "uncomment or set manually for no line wrap
set textwidth=100 "stops at col 100
set shiftwidth=4
set tabstop=4
set softtabstop=4
set showbreak=++
set scrolloff=3
set backspace=indent,eol,start
set history=500
set ignorecase
set smartcase
set hlsearch
set showmatch
set mat=2
" Cursor block
let &t_SI.="\e[5 q"
let &t_SR.="\e[4 q"
let &t_EI.="\e[1 q"
" Don't autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" Remap q to Q (macro)
nnoremap Q q
nnoremap q <Nop>
" color
colorscheme elflord
" C code completion citing clang
let g:completor_clang_binary= '/usr/bin/clang'

" tab autocomplete -> pretty leet
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^[[:keyword:][:ident:]]'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use tab to trigger auto completion.  Default suggests completions as you type.
"let g:completor_auto_trigger = 0
inoremap <expr> <Tab> Tab_Or_Complete()
